{
  "swagger": "2.0",
  "info": {
    "description": "Manage time-templates and time-events for bpm-people-time. You can also start and stop time-events",
    "version": "0.0.1",
    "title": "BPM TimeTemplate API"
  },
  "host": "localhost:9081",
  "basePath": "/people-time-service",
  "tags": [
    {
      "name": "time-event-controller",
      "description": "Manage Time Events"
    },
    {
      "name": "time-template-controller",
      "description": "Manage Time Templates"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/time-events": {
      "get": {
        "tags": [
          "time-event-controller"
        ],
        "summary": "Return a list of all events belonging to one person",
        "operationId": "getAllTimeEventsForOnePersonUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "description": "personId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all events belonging to one person",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeEvent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/time-events/start": {
      "post": {
        "tags": [
          "time-event-controller"
        ],
        "summary": "Start a time-template -> create time-event",
        "operationId": "startTimeEventUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "description": "personId",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "templateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeEvent"
            }
          },
          "201": {
            "description": "Successfully created the time event",
            "schema": {
              "$ref": "#/definitions/TimeEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/time-events/stop": {
      "post": {
        "tags": [
          "time-event-controller"
        ],
        "summary": "Stop a time-template -> set time-event stopTime",
        "operationId": "stopTimeEventUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "description": "personId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully stopped the time event",
            "schema": {
              "$ref": "#/definitions/TimeEvent"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The time event to stop was not found"
          }
        },
        "deprecated": false
      }
    },
    "/time-events/{id}": {
      "put": {
        "tags": [
          "time-event-controller"
        ],
        "summary": "Return the updated time event",
        "operationId": "updateTimeEventUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "timeEventToUpdate",
            "description": "timeEventToUpdate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the time event",
            "schema": {
              "$ref": "#/definitions/TimeEvent"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The time event to update was not found"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "time-event-controller"
        ],
        "summary": "Delete a time event",
        "operationId": "deleteTimeEventUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeEvent"
            }
          },
          "204": {
            "description": "Successfully deleted the time event",
            "schema": {
              "$ref": "#/definitions/TimeEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The time event to delete was not found"
          }
        },
        "deprecated": false
      }
    },
    "/time-templates": {
      "get": {
        "tags": [
          "time-template-controller"
        ],
        "summary": "Return a list of all templates belonging to one person",
        "operationId": "getAllTimeTemplatesForOnePersonUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "description": "personId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all templates from one person",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeTemplate"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "time-template-controller"
        ],
        "summary": "Return the created template",
        "operationId": "createTimeTemplateUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "template",
            "description": "template",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeTemplate"
            }
          },
          "201": {
            "description": "Successfully created the template",
            "schema": {
              "$ref": "#/definitions/TimeTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/time-templates/{id}": {
      "put": {
        "tags": [
          "time-template-controller"
        ],
        "summary": "Return the updated template",
        "operationId": "updateTemplateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "templateToUpdate",
            "description": "templateToUpdate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the template",
            "schema": {
              "$ref": "#/definitions/TimeTemplate"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The template to update was not found"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "time-template-controller"
        ],
        "summary": "Delete a template",
        "operationId": "deleteTemplateUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeTemplate"
            }
          },
          "204": {
            "description": "Successfully deleted the template",
            "schema": {
              "$ref": "#/definitions/TimeTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The template to delete was not found"
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "Iterable": {
      "type": "object",
      "title": "Iterable"
    },
    "ResponseEntity": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object"
        },
        "status_code": {
          "type": "string",
          "enum": [
            "100",
            "101",
            "102",
            "103",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "226",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "307",
            "308",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "426",
            "428",
            "429",
            "431",
            "451",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511"
          ]
        },
        "status_code_value": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ResponseEntity"
    },
    "TimeEvent": {
      "type": "object",
      "properties": {
        "activity": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "note": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "person_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "stop_time": {
          "type": "string",
          "format": "date-time"
        },
        "template_id": {
          "type": "string"
        }
      },
      "title": "TimeEvent"
    },
    "TimeTemplate": {
      "type": "object",
      "properties": {
        "activity": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "person_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        }
      },
      "title": "TimeTemplate"
    }
  }
}
